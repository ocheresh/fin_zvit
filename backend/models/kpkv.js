"use strict";
module.exports = (sequelize, DataTypes) => {
  const Kpkv = sequelize.define(
    "Kpkv",
    {
      id: {
        type: DataTypes.INTEGER.UNSIGNED,
        primaryKey: true,
        autoIncrement: true,
      },
      name: { type: DataTypes.STRING, allowNull: false },
      info: { type: DataTypes.TEXT, allowNull: true },
    },
    {
      tableName: "Kpkv",
      comment: "–ö–ü–ö–í",
      timestamps: false,
    }
  );

  // üîó –ê—Å–æ—Ü—ñ–∞—Ü—ñ—ó
  Kpkv.associate = (models) => {
    // –¥–æ–∫—É–º–µ–Ω—Ç–∏ (—à–∞–ø–∫–∏)
    if (models.Estimate)
      Kpkv.hasMany(models.Estimate, { foreignKey: "kpkvId" });

    if (models.Proposal)
      Kpkv.hasMany(models.Proposal, { foreignKey: "kpkvId" });

    if (models.Request) Kpkv.hasMany(models.Request, { foreignKey: "kpkvId" });

    // —Ä–µ—î—Å—Ç—Ä–∏/—Ä—è–¥–∫–∏
    if (models.BudgetExecution)
      Kpkv.hasMany(models.BudgetExecution, { foreignKey: "kpkvId" });

    if (models.RequestRegister)
      Kpkv.hasMany(models.RequestRegister, { foreignKey: "kpkvId" });

    // (—Ä—è–¥–∫–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—à—Ç–æ—Ä–∏—Å—É/–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ –º—ñ—Å—Ç—è—Ç—å kpkvId –Ω–∞–ø—Ä—è–º—É ‚Äî –≤–æ–Ω–∏ –π–¥—É—Ç—å —á–µ—Ä–µ–∑ —à–∞–ø–∫—É)
  };

  return Kpkv;
};
